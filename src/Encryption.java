package com;

import org.json.JSONObject;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Set;
import java.io.FileNotFoundException;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenu;
import  javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;
import javax.swing.DefaultListModel;

import java.awt.Toolkit;

/**
 *
 * @author Chris DiMaio
 */
public class Encryption extends javax.swing.JFrame
{
	private static final int NUMBER_OF_NON_RECENT_MENU_ITEMS = 5;

	private final String ENCRYPTED_TEXT_EXT = ".etx";
	private final String NEW_DOC_LABEL = "new";
	private final String EMPTY_STRING = "";

	// Variables declaration - do not modify                     
    private javax.swing.JMenu about;
    private javax.swing.JMenu edit;
    private javax.swing.JMenu file;
    private javax.swing.JFileChooser fileOpener;
    private javax.swing.JDialog jDialog1;
	private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem open;
    private javax.swing.JOptionPane passwordBox;
	private javax.swing.JMenuItem newDoc;
    private javax.swing.JMenuItem save;
    private javax.swing.JMenuItem saveas;
	private javax.swing.JMenuItem clear;
	private javax.swing.JMenuItem exit;
    private javax.swing.JTextArea textArea;
    private javax.swing.JCheckBoxMenuItem wordwrap;
	
	private boolean newFileFlag = true;
	private boolean fileChanged = true;
	
	private int textAreaCurrentHash = -1;
	
	private String filePath = "";
	
	private ArrayList<String> recentFiles = null;
	
	// Not used.
	private char[] savedPassword = null;
	
    /**
     * Creates new form NewJFrame
     */
    public Encryption()
	{
        initComponents();
    }
	
	public Encryption(File f)
	{
        initComponents();
		loadFile(f);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")                     
    private void initComponents()
	{
		// Not working.
		this.setIconImage(Toolkit.getDefaultToolkit().getImage("./ico.ico"));
		
        fileOpener = new javax.swing.JFileChooser();
		fileOpener.setAcceptAllFileFilterUsed(false);
        fileOpener.setMultiSelectionEnabled(false);
        fileOpener.setAcceptAllFileFilterUsed(true);
        fileOpener.setFileFilter(new FileNameExtensionFilter("Encrypted Text", "etx"));
		
        passwordBox = new javax.swing.JOptionPane();
        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
		jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList(new DefaultListModel());
		jSplitPane1 = new javax.swing.JSplitPane();
        menuBar = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
		newDoc = new javax.swing.JMenuItem();
        open = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        saveas = new javax.swing.JMenuItem();
		exit = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        wordwrap = new javax.swing.JCheckBoxMenuItem();
		clear = new javax.swing.JMenuItem();
        about = new javax.swing.JMenu();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setBorder(null);

        textArea.setColumns(20);
        textArea.setRows(5);
		textArea.getDocument().addDocumentListener(new DocumentListener() {
			public void changedUpdate(DocumentEvent e)
			{
				fileChangeActionPerformed(e);
			}
			public void removeUpdate(DocumentEvent e)
			{
				fileChangeActionPerformed(e);
			}
			public void insertUpdate(DocumentEvent e)
			{
				fileChangeActionPerformed(e);
			}
        });
        jScrollPane1.setViewportView(textArea);

		/* jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2"};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
			public void valueChanged(ListSelectionEvent e)
			{
				System.out.println("changed");
			}
        }); */
        jScrollPane2.setViewportView(jList1);
		
        file.setText("File");

		newDoc.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newDoc.setText("New");
        newDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newActionPerformed(evt);
            }
        });
        file.add(newDoc);
		
        open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        file.add(open);

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        file.add(save);

        saveas.setText("Save As");
        saveas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveasActionPerformed(evt);
            }
        });
        file.add(saveas);

		exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK ));
		exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        file.add(exit);
        menuBar.add(file);

        edit.setText("Edit");

        wordwrap.setSelected(false);
        wordwrap.setText("Word wrap");
		wordwrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordwrapActionPerformed(evt);
            }
        });
        edit.add(wordwrap);
		
        clear.setText("Clear");
		clear.addActionListener(new java.awt.event.ActionListener()
		{
            public void actionPerformed(java.awt.event.ActionEvent evt)
			{
                clearActionPerformed(evt);
            }
        });
        edit.add(clear);

        menuBar.add(edit);

        about.setText("About");
        about.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        menuBar.add(about);

        setJMenuBar(menuBar);

		jSplitPane1.setRightComponent(jScrollPane1);
		jSplitPane1.setLeftComponent(jScrollPane2);
		jSplitPane1.setDividerLocation(125);
		
       javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
        );

        pack();
		
		try{
			recentFiles = ConfigurationManager.loadRecentFiles();
			if(!recentFiles.isEmpty())
			{
				updateRecentFilesList(null, true);
			}
		}
		catch(FileNotFoundException fnfe){
			JOptionPane.showMessageDialog(null, "File Not Found!", "File Not Found", JOptionPane.ERROR_MESSAGE);
		}
    }
	
	private void updateRecentFilesList(String newRecentFile, boolean all)
	{
		final int HEAD_OF_LIST = 0;
		ArrayList<String> fileList = null;
		
	
		// Remove all recent items from menu.
		if(file.getItemCount() > NUMBER_OF_NON_RECENT_MENU_ITEMS)
		{	
			while(NUMBER_OF_NON_RECENT_MENU_ITEMS < file.getItemCount())
			{
				// system.out.println(file.getItemCount()-1);
				file.remove(file.getItemCount()-1);
			}
		}
		// system.out.println(file.getItemCount());
	
		try{
			// Load all files from config file.
			fileList = ConfigurationManager.loadRecentFiles();
		}
		catch(FileNotFoundException fnfe){
			JOptionPane.showMessageDialog(null, "File Not Found!", "File Not Found", JOptionPane.ERROR_MESSAGE);
		}
		// system.out.println(fileList.toString());
		// Add new recent file if any to front of list.
		if(newRecentFile != null)
		{
			// Removes specified element from this list, if it is present.
			fileList.remove(newRecentFile);
			
			// Add element to head of list.
			fileList.add(HEAD_OF_LIST, newRecentFile);
			
			// Save list to disk.
			ConfigurationManager.persistRecentFiles(fileList); 
			// system.out.println(newRecentFile);
		}
		// Display recent files.
		file.addSeparator();
		for(int i = 0; i < fileList.size(); i++)
		{
			JMenuItem tmp = new JMenuItem();
			final String filePath = fileList.get(i);
			tmp.setText(filePath);
			tmp.addActionListener(new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt)
				{
					loadFile(new File(filePath));
				}
			});
			file.add(tmp);
		}
	
	
		/* if(newRecentFile != null && !recentFiles.contains(newRecentFile))
		{
			recentFiles.add(newRecentFile);
		}
		int recentFileCount = recentFiles.size();
		if(all)
		{
			file.addSeparator();
			for(int i = recentFileCount-1;i >= 0;i--)
			{
				JMenuItem tmp = new JMenuItem();
				final String filePath = recentFiles.get(i);
				tmp.setText(filePath);
				tmp.addActionListener(new java.awt.event.ActionListener()
				{
					public void actionPerformed(java.awt.event.ActionEvent evt)
					{
						loadFile(new File(filePath));
					}
				});
				int position = file.getItemCount() - recentFileCount + 1;
				file.add(tmp, file.getItemCount());
			}
		}else
		{
			if(recentFileCount == 1)
			{
				file.addSeparator();
			}
			JMenuItem tmp = new JMenuItem();
			final String filePath = recentFiles.get(recentFileCount-1);
			tmp.setText(filePath);
			tmp.addActionListener(new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt)
				{
					loadFile(new File(filePath));
				}
			});
			
			int position = file.getItemCount() - recentFileCount + 1;
			file.add(tmp, position);
		}
		ConfigurationManager.persistRecentFiles(recentFiles); */
	}
	
/* 	private void updateRecentFilesList(String newRecentFile, boolean all)
	{
		if(newRecentFile != null && !recentFiles.contains(newRecentFile))
		{
			recentFiles.add(newRecentFile);
		}
		int recentFileCount = recentFiles.size();
		if(all)
		{
			file.addSeparator();
			for(int i = recentFileCount-1;i >= 0;i--)
			{
				JMenuItem tmp = new JMenuItem();
				final String filePath = recentFiles.get(i);
				tmp.setText(filePath);
				tmp.addActionListener(new java.awt.event.ActionListener()
				{
					public void actionPerformed(java.awt.event.ActionEvent evt)
					{
						loadFile(new File(filePath));
					}
				});
				int position = file.getItemCount() - recentFileCount + 1;
				file.add(tmp, file.getItemCount());
			}
		}else
		{
			if(recentFileCount == 1)
			{
				file.addSeparator();
			}
			JMenuItem tmp = new JMenuItem();
			final String filePath = recentFiles.get(recentFileCount-1);
			tmp.setText(filePath);
			tmp.addActionListener(new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt)
				{
					loadFile(new File(filePath));
				}
			});
			
			int position = file.getItemCount() - recentFileCount + 1;
			file.add(tmp, position);
		}
		ConfigurationManager.persistRecentFiles(recentFiles);
	} */
	
	private char[] showPasswordBox(String title, String message)
	{
		JPanel panel = new JPanel();
		JLabel label = new JLabel(message);
		JPasswordField pass = new JPasswordField(10);
		
		panel.add(label);
		panel.add(pass);
		
		String[] options = new String[]{"OK"};
		int option = passwordBox.showOptionDialog(this, panel, title,
			 JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
		if(option == 0)
		{				
			return pass.getPassword();
		}
		return null;
	}
	
	private void showSaveAsFileDialog()
	{
		int returnVal = fileOpener.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileOpener.getSelectedFile();
			
			FileNameExtensionFilter fileFilter = (FileNameExtensionFilter)fileOpener.getFileFilter();
			String fileExtension = fileFilter.getExtensions()[0];
			String fileName = file.getAbsolutePath();
			if(fileName.indexOf(".") == -1)
			{
				fileName += "." + fileExtension;
			}
			file = new File(fileName);
			
			boolean writeFile = false;
			boolean fileExists = file.exists();
			if(fileExists && (JOptionPane.showConfirmDialog(this, "Do you want to overwrite \"" + file.getName() + "\"?", "Title",
					JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION))
			{
				writeFile = true;
			}
			else if(!fileExists)
			{
				writeFile = true;
			}
			
			if(writeFile)
			{
				char[] password	 = showPasswordBox("Enter Password", "Password");
				char[] cPassword = showPasswordBox("Confirm Password", "Confirm Password");
				if(password != null && cPassword != null)
				{
					if(Arrays.equals(password, cPassword))
					{
						EncryptedFile ef = new EncryptedFile();
						ef.encrypt(password, textArea.getText(), fileName);
						fileChanged = false;
						filePath = file.getAbsolutePath();
						this.setTitle(filePath);
						textAreaCurrentHash = -1;
						updateRecentFilesList(filePath, false);
					}
					else
					{
						JOptionPane.showMessageDialog(null, "Passwords Don't Match!", "Bad Password", JOptionPane.ERROR_MESSAGE);
					}
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Blank Password!", "Bad Password", JOptionPane.ERROR_MESSAGE);
				}
			}
        } else {
            System.out.println("File access cancelled by user.");
        }
	}
	
	private void fileChangeActionPerformed(DocumentEvent evt)
	{ 
        fileChanged = true;
		this.setTitle("*" + filePath);
    }
	
	private void wordwrapActionPerformed(java.awt.event.ActionEvent evt)
	{ 
        textArea.setLineWrap(!textArea.getLineWrap());
    }
	
	private void clearActionPerformed(java.awt.event.ActionEvent evt)
	{ 
        textArea.setText("");
    }
	
	private void newActionPerformed(java.awt.event.ActionEvent evt)
	{   
		createNewFile();
    }
	
	private void createNewFile()
	{
		textArea.setText(EMPTY_STRING);
		this.setTitle(NEW_DOC_LABEL);
		textAreaCurrentHash = -1;
        fileChanged = false;
		newFileFlag = true;
		filePath = NEW_DOC_LABEL + ENCRYPTED_TEXT_EXT;
	}
	
    private void openActionPerformed(java.awt.event.ActionEvent evt)
	{                                            
        int returnVal = fileOpener.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
		{
            File file = fileOpener.getSelectedFile();
			// updateRecentFilesList(file.getPath(), false);
			loadFile(file);
        }
		else
		{
            System.out.println("File access cancelled by user.");
        }
    }

    private void saveActionPerformed(java.awt.event.ActionEvent evt)
	{                                     
        if(newFileFlag)
		{
			showSaveAsFileDialog();
			// newFileFlag = false;
		}
		else
		{
			System.out.println("manual file write");
		}
    }                                    

    private void saveasActionPerformed(java.awt.event.ActionEvent evt)
	{
		showSaveAsFileDialog();
    }

	private void exitActionPerformed(java.awt.event.ActionEvent evt)
	{
		System.exit(0);
    } 

	private void loadFile(File f)
	{
		try{
			char[] password = showPasswordBox("Enter Password", "Password");
			if(password != null) 
			{				
				EncryptedFile ef = new EncryptedFile();
				
				String filePath = f.getAbsolutePath();
				String decryptedText = ef.decrypt(password, filePath);
				
				if(filePath.endsWith(".ejs")){
						System.out.println("This is an encrypted JSON file.");
						
						// Make this object global and make reference to it for key values based on what's selected.
						JSONObject json = null;
						try
						{
							json = new JSONObject(decryptedText);
						}
						catch(Exception e)
						{
							e.printStackTrace();
						}
						Set<String> keySet = json.keySet();
						String keyList[] = new String[keySet.size()];
						int i = 0;
						for(String key : keySet)
						{
							keyList[i++] = key;
						}
						jList1.setListData(keyList);
				}
				else if(filePath.endsWith(".etx"))
				{
					textArea.setText(decryptedText);
				}
				else
				{
					System.out.println("Error: Unknown file type!");
				}
				
				textArea.setCaretPosition(0);
				fileChanged = false;
				filePath = f.getAbsolutePath();
				this.setTitle(filePath);
				updateRecentFilesList(filePath, false);
			}
		}
		catch(FileNotFoundException fnfe){
			JOptionPane.showMessageDialog(null, "File Not Found!", "File Not Found", JOptionPane.ERROR_MESSAGE);
		}
	}
	
    /**
     * @param args the command line arguments
     */
    public static void main(final String args[])
	{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
		
        java.awt.EventQueue.invokeLater(new Runnable()
		{
            public void run()
			{
				Encryption window = null;
				if(args.length > 0 && args[0] != null)
				{
					// system.out.println(args[0]);
					window = new Encryption(new File(args[0]));
					window.setVisible(true);
				}
				else
				{
					window = new Encryption();
					window.setVisible(true);
					window.createNewFile();
				}
            }
        });
    }
}
